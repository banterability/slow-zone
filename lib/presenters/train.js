// Generated by CoffeeScript 1.8.0
(function() {
  var Dateline, STRING_FIELDS, Train, getNativeBoolean, getNativeDate, getNativeFloat, getNativeInteger;

  Dateline = require('dateline');

  STRING_FIELDS = {
    'destNm': 'destinationName',
    'rt': 'routeId',
    'staNm': 'stationName',
    'stpDe': 'stopDescription'
  };

  Train = (function() {
    function Train(attributes) {
      var attributeName, methodName;
      this.attributes = attributes != null ? attributes : {};
      for (attributeName in STRING_FIELDS) {
        methodName = STRING_FIELDS[attributeName];
        this[methodName] = (function(value) {
          return function() {
            return value;
          };
        })(this.attributes[attributeName]);
      }
    }

    Train.prototype.isApproaching = function() {
      return getNativeBoolean(this.attributes.isApp);
    };

    Train.prototype.isDelayed = function() {
      return getNativeBoolean(this.attributes.isDly);
    };

    Train.prototype.isFaulty = function() {
      return getNativeBoolean(this.attributes.isFlt);
    };

    Train.prototype.isScheduled = function() {
      return getNativeBoolean(this.attributes.isSch);
    };

    Train.prototype.arrivalTime = function() {
      return getNativeDate(this.attributes.arrT);
    };

    Train.prototype.predictionTime = function() {
      return getNativeDate(this.attributes.prdt);
    };

    Train.prototype.latitude = function() {
      return getNativeFloat(this.attributes.lat);
    };

    Train.prototype.longitude = function() {
      return getNativeFloat(this.attributes.lon);
    };

    Train.prototype.arrivalMinutes = function() {
      return Math.round((this.arrivalTime() - this.predictionTime()) / (60 * 1000));
    };

    Train.prototype.arrivalString = function() {
      return Dateline(this.arrivalTime()).getAPTime();
    };

    Train.prototype.predictionAge = function() {
      return Math.round((new Date() - this.predictionTime()) / 1000);
    };

    Train.prototype.route = function() {
      var route;
      switch (route = this.routeId()) {
        case "Brn":
          return "Brown";
        case "G":
          return "Green";
        case "Org":
          return "Orange";
        case "P":
          return "Purple";
        case "Y":
          return "Yellow";
        default:
          return route;
      }
    };

    Train.prototype.routeClass = function() {
      return this.route().toLowerCase();
    };

    Train.prototype.destinationId = function() {
      return getNativeInteger(this.attributes.destSt);
    };

    Train.prototype.directionId = function() {
      return getNativeInteger(this.attributes.trDr);
    };

    Train.prototype.heading = function() {
      return getNativeInteger(this.attributes.heading);
    };

    Train.prototype.runNumber = function() {
      return getNativeInteger(this.attributes.rn);
    };

    Train.prototype.stationId = function() {
      return getNativeInteger(this.attributes.staId);
    };

    Train.prototype.stopId = function() {
      return getNativeInteger(this.attributes.stpId);
    };

    Train.prototype.toHash = function() {
      return {
        destination: {
          id: this.destinationId(),
          name: this.destinationName()
        },
        location: {
          latitude: this.latitude(),
          longitude: this.longitude(),
          heading: this.heading()
        },
        prediction: {
          arrivalMinutes: this.arrivalMinutes(),
          arrivalString: this.arrivalString(),
          arrivalTime: this.arrivalTime(),
          predictionAge: this.predictionAge(),
          predictionTime: this.predictionTime()
        },
        route: {
          "class": this.routeClass(),
          directionId: this.directionId(),
          id: this.routeId(),
          name: this.route(),
          run: this.runNumber()
        },
        station: {
          id: this.stationId(),
          name: this.stationName(),
          stop: {
            id: this.stopId(),
            description: this.stopDescription()
          }
        },
        status: {
          approaching: this.isApproaching(),
          delayed: this.isDelayed(),
          faulty: this.isFaulty(),
          scheduled: this.isScheduled()
        }
      };
    };

    return Train;

  })();

  module.exports = Train;

  getNativeBoolean = function(booleanString) {
    return getNativeInteger(booleanString) === 1;
  };

  getNativeDate = function(timeString) {
    var day, hour, min, month, sec, str, year, _ref;
    _ref = timeString.match(/(\d{4})(\d{2})(\d{2}) (\d{2}):(\d{2}):(\d{2})/), str = _ref[0], year = _ref[1], month = _ref[2], day = _ref[3], hour = _ref[4], min = _ref[5], sec = _ref[6];
    return new Date(year, month - 1, day, hour, min, sec);
  };

  getNativeFloat = function(floatString) {
    return parseFloat(floatString);
  };

  getNativeInteger = function(integerString) {
    return parseInt(integerString, 10);
  };

}).call(this);
