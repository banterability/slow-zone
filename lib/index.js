// Generated by CoffeeScript 1.8.0
(function() {
  var SlowZone, Train, extend, isArray, map, request, xml2js, xmlParser, _ref;

  _ref = require('underscore'), extend = _ref.extend, isArray = _ref.isArray, map = _ref.map;

  request = require('request');

  Train = require('./presenters/train');

  xml2js = require('xml2js');

  xmlParser = new xml2js.Parser({
    explicitArray: false
  });

  SlowZone = (function() {
    function SlowZone(options) {
      var namespace, _i, _len, _ref1;
      this.baseUrl = 'http://lapi.transitchicago.com/api/1.0';
      this.apiKey = options.apiKey;
      _ref1 = ['arrivals', 'follow'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        namespace = _ref1[_i];
        this.registerEndpoints(namespace);
      }
    }

    SlowZone.prototype.registerEndpoints = function(namespace) {
      var endpoint;
      endpoint = require("./endpoints/" + namespace)(this);
      return extend(this, endpoint);
    };

    SlowZone.prototype.fetch = function(endpoint, queryParams, callback) {
      var apiOptions, defaultQueryParams;
      defaultQueryParams = {
        key: this.apiKey
      };
      apiOptions = {
        qs: extend({}, queryParams, defaultQueryParams),
        uri: "" + this.baseUrl + "/" + endpoint
      };
      return request(apiOptions, function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return xmlParser.parseString(body, function(err, result) {
          var predictions, response, trainData, _ref1, _ref2;
          if ((result != null ? (_ref1 = result.ctatt) != null ? _ref1.errCd : void 0 : void 0) !== "0") {
            return callback(new Error("" + result.ctatt.errCd + " â€“ " + result.ctatt.errNm));
          }
          predictions = (_ref2 = result.ctatt) != null ? _ref2.eta : void 0;
          if (!predictions) {
            return callback(err, []);
          }
          if (!isArray(predictions)) {
            predictions = [predictions];
          }
          response = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = predictions.length; _i < _len; _i++) {
              trainData = predictions[_i];
              _results.push((new Train(trainData)).toHash());
            }
            return _results;
          })();
          return callback(err, response);
        });
      });
    };

    return SlowZone;

  })();

  module.exports = SlowZone;

}).call(this);
