// Generated by CoffeeScript 2.2.1
(function() {
  var SlowZone, Train, extend, isArray, map, request, xml2js, xmlParser;

  ({extend, isArray, map} = require('underscore'));

  request = require('request');

  Train = require('./presenters/train');

  xml2js = require('xml2js');

  xmlParser = new xml2js.Parser({
    explicitArray: false
  });

  SlowZone = class SlowZone {
    constructor(options) {
      var i, len, namespace, ref;
      this.baseUrl = 'http://lapi.transitchicago.com/api/1.0';
      this.apiKey = options.apiKey;
      ref = ['arrivals', 'follow'];
      for (i = 0, len = ref.length; i < len; i++) {
        namespace = ref[i];
        this.registerEndpoints(namespace);
      }
    }

    registerEndpoints(namespace) {
      var endpoint;
      endpoint = require(`./endpoints/${namespace}`)(this);
      return extend(this, endpoint);
    }

    fetch(endpoint, queryParams, callback) {
      var apiOptions, defaultQueryParams;
      defaultQueryParams = {
        key: this.apiKey
      };
      apiOptions = {
        qs: extend({}, queryParams, defaultQueryParams),
        uri: `${this.baseUrl}/${endpoint}`
      };
      return request(apiOptions, function(err, res, body) {
        if (err != null) {
          return callback(err);
        }
        return xmlParser.parseString(body, function(err, result) {
          var predictions, ref, ref1, response, trainData;
          if ((result != null ? (ref = result.ctatt) != null ? ref.errCd : void 0 : void 0) !== "0") {
            return callback(new Error(`${result.ctatt.errCd} â€“ ${result.ctatt.errNm}`));
          }
          predictions = (ref1 = result.ctatt) != null ? ref1.eta : void 0;
          if (!predictions) {
            return callback(err, []);
          }
          if (!isArray(predictions)) {
            predictions = [predictions];
          }
          response = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = predictions.length; i < len; i++) {
              trainData = predictions[i];
              results.push((new Train(trainData)).toHash());
            }
            return results;
          })();
          return callback(err, response);
        });
      });
    }

  };

  module.exports = SlowZone;

}).call(this);
